import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes
)

# ===== CONFIG =====
TOKEN = "7738250304:AAFFsDvI5dy_pbwHDPYdnd2Nk73gRNv6EMs"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç BotFather
CHANNEL_NAME = "@Sugrefftea"  # –í–∞—à –∫–∞–Ω–∞–ª
ADMIN_ID = 7971829199  # –í–∞—à ID –¥–ª—è –∞–¥–º–∏–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# ===================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è - —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è async)
conn = sqlite3.connect('bot.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        subscribed BOOLEAN DEFAULT 0
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS screenshots (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        file_id TEXT,
        verified BOOLEAN DEFAULT 0
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS participants (
        user_id INTEGER PRIMARY KEY,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
''')
conn.commit()

# ===== –¢–ï–ö–°–¢–´ =====
TEXTS = {
    "start": (
        "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* üåü\n\n"
        "–•–æ—á–µ—à—å –≤—ã–∏–≥—Ä–∞—Ç—å –∫—Ä—É—Ç—ã–µ –ø—Ä–∏–∑—ã? –ü—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω–∏ 3 —à–∞–≥–∞:\n"
        "1Ô∏è‚É£ –û—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ –Ω–∞ Wildberries\n"
        "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç—é–¥–∞\n"
        "3Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {channel} –∏ –Ω–∞–∂–º–∏ ¬´–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å¬ª –≤ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º –ø–æ—Å—Ç–µ\n\n"
        "*–ü—Ä–∏–∑—ã —Ä–∞–∑—ã–≥—Ä—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü!* üéÅ"
    ),
    "photo_received": (
        "‚úÖ *–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω!*\n\n"
        "–¢–µ–ø–µ—Ä—å:\n"
        "1. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {channel}\n"
        "2. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å¬ª –≤ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º –ø–æ—Å—Ç–µ\n\n"
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–π–º–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤. –£–¥–∞—á–∏! üçÄ"
    ),
    "not_subscribed": (
        "üîî *–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!*\n\n"
        "–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å, –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ {channel}\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
    ),
    "check_subscription": "üîÑ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è",
    "participate_success": (
        "‚ú® *–¢—ã –≤ –∏–≥—Ä–µ!*\n\n"
        "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –±—É–¥–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ. –£–¥–∞—á–∏! üéâ"
    ),
    "participate_error": (
        "üö´ *–ù–µ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!*\n\n"
        "–ù—É–∂–Ω–æ:\n"
        "1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞\n"
        "2. –ë—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª {channel}"
    )
}

# ===== –ö–ù–û–ü–ö–ò =====
def main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(TEXTS["check_subscription"], callback_data="check_subscription")]
    ])

# ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    cursor.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', 
                  (user.id, user.username))
    conn.commit()
    
    text = TEXTS["start"].format(channel=CHANNEL_NAME)
    await update.message.reply_text(text, parse_mode="Markdown")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    photo_id = update.message.photo[-1].file_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    cursor.execute('INSERT INTO screenshots (user_id, file_id) VALUES (?, ?)',
                  (user.id, photo_id))
    conn.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    text = TEXTS["photo_received"].format(channel=CHANNEL_NAME)
    await update.message.reply_text(text, 
                                   parse_mode="Markdown",
                                   reply_markup=main_keyboard())

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    
    try:
        member = await context.bot.get_chat_member(CHANNEL_NAME, user.id)
        if member.status in ["member", "administrator"]:
            cursor.execute('UPDATE users SET subscribed = 1 WHERE user_id = ?', (user.id,))
            conn.commit()
            await query.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
            await query.edit_message_text(TEXTS["participate_success"], parse_mode="Markdown")
        else:
            await query.answer("‚ùå –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!")
    except Exception as e:
        await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏")

async def participate_button(context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="participate")]
    ])
    await context.bot.send_message(
        chat_id=CHANNEL_NAME,
        text="üéÅ *–†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–∑–æ–≤!* –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

async def handle_participate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
    cursor.execute('SELECT subscribed FROM users WHERE user_id = ?', (user.id,))
    subscribed = cursor.fetchone()
    
    cursor.execute('SELECT id FROM screenshots WHERE user_id = ?', (user.id,))
    has_screenshot = cursor.fetchone()
    
    if subscribed and subscribed[0] and has_screenshot:
        cursor.execute('INSERT OR IGNORE INTO participants (user_id) VALUES (?)', (user.id,))
        conn.commit()
        await query.answer("‚úÖ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!")
        await query.edit_message_text(TEXTS["participate_success"], parse_mode="Markdown")
    else:
        await query.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ —É—Å–ª–æ–≤–∏—è!")
        await query.edit_message_text(
            TEXTS["participate_error"].format(channel=CHANNEL_NAME),
            parse_mode="Markdown"
        )

# ===== –ó–ê–ü–£–°–ö =====
if __name__ == '__main__':
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(check_subscription, pattern="check_subscription"))
    application.add_handler(CallbackQueryHandler(handle_participate, pattern="participate"))

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —É—á–∞—Å—Ç–∏—è –≤ –∫–∞–Ω–∞–ª–µ
    application.job_queue.run_once(participate_button, when=5)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()
